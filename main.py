import asyncio
import logging
import os
from typing import Optional
from contextlib import asynccontextmanager

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from dotenv import load_dotenv
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "your_bot_token_here")
ADMIN_ID = int(os.getenv("ADMIN_ID", "your_admin_id_here"))
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", "8080"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class ComplaintRequest(BaseModel):
    complaint: str
    user_name: Optional[str] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    email: Optional[str] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    phone: Optional[str] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    post_id: Optional[str] = "–ù–µ —É–∫–∞–∑–∞–Ω"

class FeedbackRequest(BaseModel):
    feedback: str
    user_name: Optional[str] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    email: Optional[str] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    phone: Optional[str] = "–ù–µ —É–∫–∞–∑–∞–Ω"


@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∂–∞–ª–æ–±—É, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )


@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    me = await bot.get_me()
    await message.answer(
        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"–ë–æ—Ç: @{me.username}\n"
        f"–†–µ–∂–∏–º: Polling (–±–µ–∑ –≤–µ–±—Ö—É–∫–æ–≤)\n"
        f"Admin ID: {ADMIN_ID}\n"
        f"API —Å–µ—Ä–≤–µ—Ä: http://localhost:{WEBAPP_PORT}"
    )


@dp.message()
async def handle_complaint(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ò–∞–∏–∞, —Å–≥–ª")
        return
   
    await message.answer("C–µ—Ç —á–µ—Ç–∞–º")



# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifecycle
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    if not await init_bot():
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
    
    yield
    
    # Shutdown
    task.cancel()
    await bot.session.close()

app = FastAPI(
    title="TTA Bot API",
    description="API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –∏ –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
    version="1.0.0",
    lifespan=lifespan
)


# FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.post("/complaint")
async def create_complaint(complaint: ComplaintRequest):
    """–°–æ–∑–¥–∞—Ç—å –∂–∞–ª–æ–±—É"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        complaint_text = (
            f"üìù –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ —á–µ—Ä–µ–∑ API:\n\n"
            f"üë§ –û—Ç: {complaint.user_name}\n"
            f"üìß Email: {complaint.email}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {complaint.phone}\n\n"
            f"üí¨ –ñ–∞–ª–æ–±–∞:\n{complaint.complaint}\n"
            f"üîó –ü–æ—Å—Ç: {complaint.post_id}\n"
        )
        
        await bot.send_message(ADMIN_ID, complaint_text)
        return {"status": "success", "message": "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã")


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "TTA Bot API"}


async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    try:
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        return False
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ TTA Bot API...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä —Å uvicorn
    uvicorn.run(
        app,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
        log_level="info"
    )


if __name__ == "__main__":
    main()
